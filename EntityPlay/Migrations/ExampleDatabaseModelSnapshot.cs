// <auto-generated />
using System;
using EntityPlay.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EntityPlay.Migrations
{
    [DbContext(typeof(ExampleDatabase))]
    partial class ExampleDatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EntityPlay.Entities.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppointmentName");

                    b.Property<int>("CustomerId");

                    b.Property<DateTimeOffset>("Date");

                    b.Property<string>("Location");

                    b.Property<string>("Notes")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentName = "Get Teeth Cleaned",
                            CustomerId = 1,
                            Date = new DateTimeOffset(new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            Notes = "They are dirty"
                        },
                        new
                        {
                            Id = 2,
                            AppointmentName = "Get Teeth Pulled",
                            CustomerId = 2,
                            Date = new DateTimeOffset(new DateTime(2019, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -5, 0, 0, 0)),
                            Notes = "They hurt"
                        },
                        new
                        {
                            Id = 3,
                            AppointmentName = "Get hair cut",
                            CustomerId = 2,
                            Date = new DateTimeOffset(new DateTime(2019, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -4, 0, 0, 0)),
                            Notes = "Too long"
                        },
                        new
                        {
                            Id = 4,
                            AppointmentName = "Get coffee",
                            CustomerId = 2,
                            Date = new DateTimeOffset(new DateTime(2019, 6, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -4, 0, 0, 0)),
                            Notes = "I am sleepy"
                        },
                        new
                        {
                            Id = 5,
                            AppointmentName = "Get tea",
                            CustomerId = 1,
                            Date = new DateTimeOffset(new DateTime(2019, 7, 4, 0, 0, 0, 0, DateTimeKind.Unspecified), new TimeSpan(0, -4, 0, 0, 0)),
                            Notes = "My tummy hurts"
                        });
                });

            modelBuilder.Entity("EntityPlay.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Age");

                    b.Property<string>("Email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 5,
                            Email = "James@gmail.com",
                            Name = "James"
                        },
                        new
                        {
                            Id = 2,
                            Age = 6,
                            Email = "byron@hotmail.com",
                            Name = "Byron"
                        },
                        new
                        {
                            Id = 3,
                            Age = 7,
                            Email = "nora@aol.com",
                            Name = "Nora"
                        },
                        new
                        {
                            Id = 4,
                            Age = 4,
                            Email = "cameron@gmail.com",
                            Name = "Cameron"
                        });
                });

            modelBuilder.Entity("EntityPlay.Entities.Appointment", b =>
                {
                    b.HasOne("EntityPlay.Entities.Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
